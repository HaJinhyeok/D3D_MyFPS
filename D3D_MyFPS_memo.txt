1. depth buffer가 제대로 작동하지 않는다
-> projection matrix 생성 시, near plane의 값을 0.0f에서 1.0f(혹은 0.0f가 아닌 다른 값)으로 바꾸니 해결

2. 근데 이번엔 frustum culling이 제대로 작동하지 않는다
-> D3DXMatrixPerspectiveFovLH 함수의 결과 행렬을 살펴보면, 다음과 같다고 한다.
xScale  0       0         0
0    yScale     0         0
0     0     zf/(zf-zn)     1
0     0    -zn*zf/(zf-zn)  0
-> 여기서 zn이 0.0f에서 1.0f로 바뀌게 되면서 _43의 값이 0이 아니게 되었다. 이로 인한 차이인가?
--> frustum culling은 추후에, 프로그램 다 만들고나서 다시 해보는 걸로...

3. player가 flashlight를 비추는데, player 바로 코앞은 암흑인 상황
-> 분명 light의 position은 player와 동일한데, 왜 코앞에는 빛이 없을까...
--> 모르겠다. 그냥 player를 머리 바로 위에서 비추는 spotlight를 하나 더 추가해서 해결해버림

4. 비스듬히 벽에 충돌 시, z축으로는 이동 되는데 x축으로는 벽에 막힌듯이 이동 불가한 현상
-> 현재 충돌 검사 방식이, x축 확인 후 z축 확인이라 그런 듯하다.
--> 충돌 검사 과정을 갈아엎긴 귀찮으므로, 그냥 x축 이동 검사할 때, x축 진행 방향에 블록 없으면 위치 보정 안 되게 수정
--> 생각해보니, 충돌 검사 규칙을 다르게도 할 수 있을 것 같다.
{ (-x, -z), (-x, 0), (-x, +z), (0, -z), (0, +z), (+x, -z), (+x, 0), (+x, +z) }의 8방향으로만 이동이 진행되므로,
각각의 방향에 대해 3개 블록만 체크해보는 것도 가능할 것 같다.
ex)
123
4*5
678
(-x, -z) 이동이면 4, 6, 7번 블록에 대해서만 충돌 검사를 시행해도 된다.
--> 경우의 수를 8개로 나누기 때문에 코드 길이는 길어지지만 지금보다 좀 더 정확할지도?

5. 실제 fps게임처럼 마우스를 통한 화면전환 시도
-> 윈도우 내에서는 가능한데, 밖으로 마우스가 벗어나면 불가
--> SetCapture함수로는 마우스 버튼을 클릭한 상태로 클라이언트 영역을 벗어나야 밖에서도 인식이 가능함
--> 검색해보니, DirectInput을 통해 이러한 한계점을 극복할 수 있다는데 찾아봐야할 듯.
https://blog.naver.com/hannip75/120202384067 << 참고해보자
https://blog.naver.com/winterwolfs/10171627611 << 로 해결
--> 매 순간 마우스 커서 위치를 윈도우 정중앙으로 이동하고, mousemove 시에 이동한 만큼 화면 전환 후 다시 정중앙 고정.
--> ShowCursor() 함수의 경우, CursorInfo라는 구조체에 카운트되는데,
이 카운터가 0 이상이면 커서가 표시되고 0 미만이면 표시되지 않는다.
ShowCursor(FALSE)를 호출할 시 -1, ShowCursor(TRUE)를 호출할 시 +1이 카운트된다. 

6. 클릭 시 총알(구체) 날아가는 이펙트
-> 날아가긴 하는데, 생각했던 것처럼 자연스럽지 않음
-> 여러 번 클릭 시, 따발총마냥 나가는 게 아니라 하나씩 발사되고 일정한 속도가 아니라 렉 걸린 것마냥 가속도 붙어서 발사

7. FPS(FRAME)
--> 디바이스 설정: d3dpp.PresentationInterval 설정해야 디스플레이 정보에서 제한해 놓은 Hz 값을 넘을 수 있다?
--> https://m.cafe.daum.net/clang/HIYy/25?q=D_4gI5L5EgFJI0&
--> CPU에 따라 FPS 값의 변화 크다


-- 추가할 내용 --
1. skybox 활용해서 낮과 밤의 자연스러운 전환 시도
2. 장애물 요소 추가(DX xfile) --> 네이버 루벤딕스 블로그 DirectX9 - XFile 포스팅 참고

3. 예전에 건드려봤던 FPS(FRAME), Frustum Culling 등등
-> 프레임을 조절하기: 컴퓨터 성능과 상관없이 일정하게 움직일 수 있도록
-> Frustum Culling 제대로 동작하도록 만들기