1. depth buffer가 제대로 작동하지 않는다
-> projection matrix 생성 시, near plane의 값을 0.0f에서 1.0f(혹은 0.0f가 아닌 다른 값)으로 바꾸니 해결

2. 근데 이번엔 frustum culling이 제대로 작동하지 않는다
-> D3DXMatrixPerspectiveFovLH 함수의 결과 행렬을 살펴보면, 다음과 같다고 한다.
xScale  0       0         0
0    yScale     0         0
0     0     zf/(zf-zn)     1
0     0    -zn*zf/(zf-zn)  0
-> 여기서 zn이 0.0f에서 1.0f로 바뀌게 되면서 _43의 값이 0이 아니게 되었다. 이로 인한 차이인가?
--> frustum culling은 추후에, 프로그램 다 만들고나서 다시 해보는 걸로...

3. player가 flashlight를 비추는데, player 바로 코앞은 암흑인 상황
-> 분명 light의 position은 player와 동일한데, 왜 코앞에는 빛이 없을까...
--> 모르겠다. 그냥 player를 머리 바로 위에서 비추는 spotlight를 하나 더 추가해서 해결해버림

4. 비스듬히 벽에 충돌 시, z축으로는 이동 되는데 x축으로는 벽에 막힌듯이 이동 불가한 현상
-> 현재 충돌 검사 방식이, x축 확인 후 z축 확인이라 그런 듯하다.
--> 충돌 검사 과정을 갈아엎긴 귀찮으므로, 그냥 x축 이동 검사할 때, x축 진행 방향에 블록 없으면 위치 보정 안 되게 수정
--> 생각해보니, 충돌 검사 규칙을 다르게도 할 수 있을 것 같다.
{ (-x, -z), (-x, 0), (-x, +z), (0, -z), (0, +z), (+x, -z), (+x, 0), (+x, +z) }의 8방향으로만 이동이 진행되므로,
각각의 방향에 대해 3개 블록만 체크해보는 것도 가능할 것 같다.
ex)
123
4*5
678
(-x, -z) 이동이면 4, 6, 7번 블록에 대해서만 충돌 검사를 시행해도 된다.
--> 경우의 수를 8개로 나누기 때문에 코드 길이는 길어지지만 지금보다 좀 더 정확할지도?

5. 실제 fps게임처럼 마우스를 통한 화면전환 시도
-> 윈도우 내에서는 가능한데, 밖으로 마우스가 벗어나면 불가
--> SetCapture함수로는 마우스 버튼을 클릭한 상태로 클라이언트 영역을 벗어나야 밖에서도 인식이 가능함
--> 검색해보니, DirectInput을 통해 이러한 한계점을 극복할 수 있다는데 찾아봐야할 듯.
https://blog.naver.com/hannip75/120202384067 << 참고해보자


-- 추가할 내용 --
1. skybox 활용해서 낮과 밤의 자연스러운 전환 시도
2. 장애물 요소 추가(DX xfile)

3. 예전에 건드려봤던 FPS(FRAME), Frustum Culling 등등
4. 마우스 클릭 시 총알 날아가는 이펙트(총알은 구체 혹은 육면체)